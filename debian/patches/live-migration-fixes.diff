Index: new/arch_init.c
===================================================================
--- new.orig/arch_init.c	2012-02-09 13:15:26.000000000 +0100
+++ new/arch_init.c	2012-02-09 13:22:53.000000000 +0100
@@ -264,6 +264,8 @@
     uint64_t bytes_transferred_last;
     double bwidth = 0;
     uint64_t expected_time = 0;
+    static int64_t starttime = 0;
+    double timediff;
     int ret;
 
     if (stage < 0) {
@@ -299,10 +301,10 @@
             qemu_put_buffer(f, (uint8_t *)block->idstr, strlen(block->idstr));
             qemu_put_be64(f, block->length);
         }
+
+	starttime = qemu_get_clock_ns(rt_clock);
     }
 
-    bytes_transferred_last = bytes_transferred;
-    bwidth = qemu_get_clock_ns(rt_clock);
 
     while ((ret = qemu_file_rate_limit(f)) == 0) {
         int bytes_sent;
@@ -318,8 +320,8 @@
         return ret;
     }
 
-    bwidth = qemu_get_clock_ns(rt_clock) - bwidth;
-    bwidth = (bytes_transferred - bytes_transferred_last) / bwidth;
+    timediff = qemu_get_clock_ns(rt_clock) - starttime;
+    bwidth = bytes_transferred / timediff;
 
     /* if we haven't transferred anything this round, force expected_time to a
      * a very high value, but without crashing */
@@ -340,6 +342,10 @@
 
     qemu_put_be64(f, RAM_SAVE_FLAG_EOS);
 
+    if ((stage == 2) && (bytes_transferred > 2*ram_bytes_total())) {
+        return 1;
+    }
+
     expected_time = ram_save_remaining() * TARGET_PAGE_SIZE / bwidth;
 
     return (stage == 2) && (expected_time <= migrate_max_downtime());
