Index: new/block/backup.c
===================================================================
--- new.orig/block/backup.c	2014-11-20 07:55:31.000000000 +0100
+++ new/block/backup.c	2014-11-20 08:56:23.000000000 +0100
@@ -39,6 +39,7 @@
     BdrvDirtyBitmap *sync_bitmap;
     MirrorSyncMode sync_mode;
     RateLimit limit;
+    BackupDumpFunc *dump_cb;
     BlockdevOnError on_source_error;
     BlockdevOnError on_target_error;
     CoRwlock flush_rwlock;
@@ -136,14 +137,21 @@
             goto out;
         }
 
+        int64_t start_sec = start * BACKUP_SECTORS_PER_CLUSTER;
         if (buffer_is_zero(iov.iov_base, iov.iov_len)) {
-            ret = bdrv_co_write_zeroes(job->target,
-                                       start * BACKUP_SECTORS_PER_CLUSTER,
-                                       n, BDRV_REQ_MAY_UNMAP);
+            if (job->dump_cb) {
+                ret = job->dump_cb(job->common.opaque, job->target, start_sec, n, NULL);
+            }
+            if (job->target) {
+                ret = bdrv_co_write_zeroes(job->target, start_sec, n, BDRV_REQ_MAY_UNMAP);
+            }
         } else {
-            ret = bdrv_co_writev(job->target,
-                                 start * BACKUP_SECTORS_PER_CLUSTER, n,
-                                 &bounce_qiov);
+            if (job->dump_cb) {
+                ret = job->dump_cb(job->common.opaque, job->target, start_sec, n, bounce_buffer);
+            }
+            if (job->target) {
+                ret = bdrv_co_writev(job->target, start_sec, n, &bounce_qiov);
+            }
         }
         if (ret < 0) {
             trace_backup_do_cow_write_fail(job, start, ret);
@@ -205,7 +213,9 @@
 {
     BackupBlockJob *s = container_of(job, BackupBlockJob, common);
 
-    bdrv_iostatus_reset(s->target);
+    if (s->target) {
+        bdrv_iostatus_reset(s->target);
+    }
 }
 
 static const BlockJobDriver backup_job_driver = {
@@ -221,9 +231,11 @@
     if (read) {
         return block_job_error_action(&job->common, job->common.bs,
                                       job->on_source_error, true, error);
-    } else {
+    } else if (job->target) {
         return block_job_error_action(&job->common, job->target,
                                       job->on_target_error, false, error);
+    } else {
+        return BLOCK_ERROR_ACTION_REPORT;
     }
 }
 
@@ -264,9 +276,11 @@
 
     job->bitmap = hbitmap_alloc(end, 0);
 
-    bdrv_set_enable_write_cache(target, true);
-    bdrv_set_on_error(target, on_target_error, on_target_error);
-    bdrv_iostatus_enable(target);
+    if (target) {
+        bdrv_set_enable_write_cache(target, true);
+        bdrv_set_on_error(target, on_target_error, on_target_error);
+        bdrv_iostatus_enable(target);
+    }
 
     bdrv_add_before_write_notifier(bs, &before_write);
 
@@ -359,8 +373,10 @@
     }
     hbitmap_free(job->bitmap);
 
-    bdrv_iostatus_disable(target);
-    bdrv_op_unblock_all(target, job->common.blocker);
+    if (target) {
+        bdrv_iostatus_disable(target);
+        bdrv_op_unblock_all(target, job->common.blocker);
+    }
 
     data = g_malloc(sizeof(*data));
     data->ret = ret;
@@ -370,13 +386,15 @@ for backup_start
                   BdrvDirtyBitmap *sync_bitmap,
                   BlockdevOnError on_source_error,
                   BlockdevOnError on_target_error,
+                  BackupDumpFunc *dump_cb,
                   BlockCompletionFunc *cb, void *opaque,
+                  bool paused,
                   Error **errp)
 {
     int64_t len;
 
     assert(bs);
-    assert(target);
+    assert(target || dump_cb);
     assert(cb);
 
     if (bs == target) {
@@ -419,7 +437,7 @@ in backup_start
         return;
     }
 
-    if (!bdrv_is_inserted(target)) {
+    if (target && !bdrv_is_inserted(target)) {
         error_setg(errp, "Device is not inserted: %s",
                    bdrv_get_device_name(target));
         return;
@@ -429,7 +447,7 @@ in backup_start
         return;
     }
 
-    if (bdrv_op_is_blocked(target, BLOCK_OP_TYPE_BACKUP_TARGET, errp)) {
+    if (target && bdrv_op_is_blocked(target, BLOCK_OP_TYPE_BACKUP_TARGET, errp)) {
         return;
     }
 
@@ -397,14 +415,17 @@ in backup_start
         goto error;
     }
 
-    bdrv_op_block_all(target, job->common.blocker);
+    if (target)
+        bdrv_op_block_all(target, job->common.blocker);
 
+    job->dump_cb = dump_cb;
     job->on_source_error = on_source_error;
     job->on_target_error = on_target_error;
     job->target = target;
     job->sync_mode = sync_mode;
     job->sync_bitmap = sync_mode == MIRROR_SYNC_MODE_INCREMENTAL ?
                        sync_bitmap : NULL;
+    job->common.paused = paused;
     job->common.len = len;
     job->common.co = qemu_coroutine_create(backup_run);
     qemu_coroutine_enter(job->common.co, job);
Index: new/blockdev.c
===================================================================
--- new.orig/blockdev.c	2014-11-20 07:55:31.000000000 +0100
+++ new/blockdev.c	2014-11-20 08:48:02.000000000 +0100
@@ -2223,8 +2223,8 @@ qmp_drive_backup
     }
 
     backup_start(bs, target_bs, speed, sync, bmap,
-                 on_source_error, on_target_error,
-                 block_job_cb, bs, &local_err);
+                 on_source_error, on_target_error, NULL,
+                 block_job_cb, bs, false, &local_err);
     if (local_err != NULL) {
         bdrv_unref(target_bs);
         error_propagate(errp, local_err);
@@ -2284,7 +2284,7 @@ qmp_blockdev_backup
     bdrv_ref(target_bs);
     bdrv_set_aio_context(target_bs, aio_context);
     backup_start(bs, target_bs, speed, sync, NULL, on_source_error,
-                 on_target_error, block_job_cb, bs, &local_err);
+                 on_target_error, NULL, block_job_cb, bs, false, &local_err);
     if (local_err != NULL) {
         bdrv_unref(target_bs);
         error_propagate(errp, local_err);
Index: new/include/block/block_int.h
===================================================================
--- new.orig/include/block/block_int.h	2014-11-20 07:55:31.000000000 +0100
+++ new/include/block/block_int.h	2014-11-20 08:52:59.000000000 +0100
@@ -57,6 +57,9 @@
 
 #define BLOCK_PROBE_BUF_SIZE        512
 
+typedef int BackupDumpFunc(void *opaque, BlockDriverState *bs,
+                           int64_t sector_num, int n_sectors, unsigned char *buf);
+
 typedef struct BdrvTrackedRequest {
     BlockDriverState *bs;
     int64_t offset;
@@ -583,7 +586,9 @@
                   BdrvDirtyBitmap *sync_bitmap,
                   BlockdevOnError on_source_error,
                   BlockdevOnError on_target_error,
+                  BackupDumpFunc *dump_cb,
                   BlockCompletionFunc *cb, void *opaque,
+                  bool paused,
                   Error **errp);
 
 void blk_dev_change_media_cb(BlockBackend *blk, bool load);
